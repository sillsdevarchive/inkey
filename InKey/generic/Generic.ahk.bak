/*	InKey script to provide a keyboard layout for GENERIC.

	Keyboard:	GENERIC
	Version:	1.0
	Author:
	Official Distribution:	http://inkeysoftware.com

	You are free to modify this script for your own purposes. Please give credit as appropriate.

Remarks:
	The samples here introduce the contextual features, but not rotas.

	The comments in this file that follow ;|	were auto-generated by InsertUnicodeCmts.pl

HISTORY:
*/

;________________________________________________________________________________________________________________
; This section is required at the top of every InKey keyboard script:

K_MinimumInKeyLibVersion = 0.094
	; The version number of the InKeyLib.ahki file that the keyboard developer used while writing this script.
	; It can be found near the top of the InKeyLib.ahki file.
	; It may be lower than the InKey version number.
	; If a user has an older version of InKeyLib.ahki, he will need to update it in order to use this keyboard script.
	; This protects your script from crashing from attempting to use functionality not present in older versions of InKeyLib.ahki.

K_UseContext = 1	; Causes uncaptured character keys to be included in the context too.

#include InKeyLib.ahki

OnLoadScript:	; This section is executed when this InKey script is first loaded.
	RegisterRota(33, "Ã‘~ ð“€± N Ã‘ N~	Ã±~ n Ã± n~	Ìƒ~ Ìƒ ~", 0x303, 0, 0, 1)
	RegisterRota(1, "n É² Å‹ É³")
	return


$a::	; This section is called when the user presses the unshifted A key
SendChar(0xE5) 	; In response to the keypress, we send the "Ã¥" character, whose Unicode value is Hex E5.
TrayTipQ("You pressed the unshifted 'A' key")  ; We'll display a tray tip, just for fun.
return

$+a::	; This section is called when the user presses the Shifted A key
   SendChar(0xC5) 	; In response, we send "Ã…"
   TrayTipQ("You pressed Shift+A")
   return


$~::DoRota(33)

$\::
$+\::
SendChar(UseUpperCase() ? 0x014A : 0x014B)  ; ÅŠ or Å‹
return


$=::  	; Handler for the equals (=) key
	if (not DoRota(1))
		SoundPlay *16
	return


$7::
if (ctx()) {	; if there is a context
	InsertChar(0x230A)	; insert this prior to the last character	;|	left_floor (âŒŠ)
	SendChar(0x230B)	; send this at the end				;|	right_floor (âŒ‹)
} else
	SoundPlay *64	; Play the "info" sound
return
