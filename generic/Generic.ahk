/*	InKey script to provide a keyboard layout for GENERIC.

	Keyboard:	GENERIC
	Version:	1.0
	Author:
	Official Distribution:	http://inkeysoftware.com

	You are free to modify this script for your own purposes. Please give credit as appropriate.

Remarks:
	The samples here introduce the contextual features, but not rotas.

	The comments in this file that follow ;|	were auto-generated by InsertUnicodeCmts.pl

HISTORY:
*/

;________________________________________________________________________________________________________________
; This section is required at the top of every InKey keyboard script:

K_MinimumInKeyLibVersion = 0.103
	; The version number of the InKeyLib.ahki file that the keyboard developer used while writing this script.
	; It can be found near the top of the InKeyLib.ahki file.
	; It may be lower than the InKey version number.
	; If a user has an older version of InKeyLib.ahki, he will need to update it in order to use this keyboard script.
	; This protects your script from crashing from attempting to use functionality not present in older versions of InKeyLib.ahki.

K_UseContext = 1	; Causes uncaptured character keys to be included in the context too.
rep := 1

#include InKeyLib.ahki

OnLoadScript:	; This section is executed when this InKey script is first loaded.
	RegisterRota(33, "Ã‘~ ð“€± N Ã‘ N~	Ã±~ n Ã± n~	Ìƒ~ Ìƒ ~", 0x303, 0, 0, 1)
	return

$~::DoRota(33)

/*
$n::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendChr("Å‹")
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendChr time is " . x
return

$r::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendChr2("Â®")
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendChr2 time is " . x
return
*/
$a::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendChar(0x0105)
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendChar time is " . x
return

$c::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendText("Ä‰")
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendText time is " . x
return


$!k::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendText("Å‹ð“€±að“€²bð“€±")
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendText time is " . x
return
