/*	InKey script to provide a keyboard layout for GENERIC.

	Keyboard:	GENERIC
	Version:	1.0
	Author:
	Official Distribution:	http://inkeysoftware.com

	You are free to modify this script for your own purposes. Please give credit as appropriate.

Remarks:
	The samples here introduce the contextual features, but not rotas.

	The comments in this file that follow ;|	were auto-generated by InsertUnicodeCmts.pl

HISTORY:
*/

;________________________________________________________________________________________________________________
; This section is required at the top of every InKey keyboard script:

K_MinimumInKeyLibVersion = 0.103
	; The version number of the InKeyLib.ahki file that the keyboard developer used while writing this script.
	; It can be found near the top of the InKeyLib.ahki file.
	; It may be lower than the InKey version number.
	; If a user has an older version of InKeyLib.ahki, he will need to update it in order to use this keyboard script.
	; This protects your script from crashing from attempting to use functionality not present in older versions of InKeyLib.ahki.

K_UseContext = 1	; Causes uncaptured character keys to be included in the context too.
rep := 1
uFlags := 1

#include InKeyLib.ahki

OnLoadScript:	; This section is executed when this InKey script is first loaded.
	RegisterRota(33, "√ë~ ìÄ± N √ë N~	√±~ n √± n~	ÃÉ~ ÃÉ ~", 0x303, 0, 0, 1)
	RegisterRota(1, "d √∞ …ó …ñ »° ·∂ë·∂ë ·∂Å ìÄ± ·µ≠", 42, 0, 0, 1)
	RegisterRota(2, "e ee …õ …õ…õ √© √™ √® …ô", 0x65, 0, 0, 8) ;| e ee …õ …õ…õ √© √™ √® …ô
	return

$~::DoRota(33)

/*
$n::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendChr("≈ã")
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendChr time is " . x
return

$r::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendChr2("¬Æ")
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendChr2 time is " . x
return
*/
$a::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendChar(0x0105)
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendChar time is " . x
return

$c::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendText("ƒâ")
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendText time is " . x
return


$!k::
DllCall("QueryPerformanceCounter", "Int64*", CounterBefore)
Loop % rep
{
	SendText("≈ãìÄ±aìÄ≤bìÄ±")
}
DllCall("QueryPerformanceCounter", "Int64*", CounterAfter)
DllCall("QueryPerformanceFrequency", "Int64 *", f)
x := (CounterAfter - CounterBefore) * 1000 / (f * rep)
OutputDebug % "SendText time is " . x
return

$1::SendChar(0x916, uFlags++)
$2::SendChars("0x926,0x94D,0x935", uFlags++)
$3::SendText("‡§¶‡•ç‡§µ", uFlags++)
$4::InsertChars("42,43", uFlags++, 1)
$5::InsertText("ins‡§µrted", uFlags++, 1) ; DOESN'T WORK
$6::ReplaceChar(42, 2, 3) ; If the context is "abXXde", then ReplaceChar(42, 2, 3) will make it "ab*de".
$7::InsertChar(42, uFlags++)
$8::DeleteChar(2, 3)  ; DeleteChar(2, 3) when context is "abXXcd" will delete the 2 X'es that end 3 characters back.

$9::
v := ctx()+0
t := "‡§Æ‡•á‡§∞‡•ã ctx = " . v
v := flags() + 0
t2 := "flags: " . v
TrayTipQ(t, t2, 2000)
return

$0::ToolTipU("t‡§¶‡•ç‡§µ tip text", 2000)
$q::Back(2)
$w::PreviewChar(0x915, 2000)
$e::DoRota(1)
$r::DoRota(2)
