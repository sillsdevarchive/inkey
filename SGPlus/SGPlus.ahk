/*	InKey script to provide a keyboard layout for SGPlus
	  Autogenerated by InKeyKeyboardCreator
	  (adjusted by 'SGPlus Adjust AHK.cc'
	  and manual section added at the end)

	Keyboard:	SGPlus
	Version:    1.0
	Author:
	Official Distribution: http://inkeysoftware.com

*/

;________________________________________________________________________________________________________________
; This section is required at the top of every InKey keyboard script:

K_MinimumInKeyLibVersion = 0.092
	  ; The version number of the InKeyLib.ahki file that the keyboard developer used while writing this script.
	  ; It can be found near the top of the InKeyLib.ahki file.
	  ; It may be lower than the InKey version number.
	  ; If a user has an older version of InKeyLib.ahki, he will need to update it in order to use this keyboard script.
	  ; This protects your script from crashing from attempting to use functionality not present in older versions of InKeyLib.ahki.

K_UseContext = 1  ; Causes uncaptured character keys to be included in the context too.

#include InKeyLib.ahki
;________________________________________________________________________________________________________________


OnLoadScript:
RegisterRota(1, "^ ̂ ̀ ́ ̄ ᷄ ̌", 0x5E, 0, 0, 8)  ;| ^ ̂ ̀ ́ ̄ ᷄ ̌
RegisterRota(2, "¨ ̈", 0xA8, 0, 0, 8)  ;| ¨ ̈
RegisterRota(3, "° ̊", 0xB0, 0, 0, 8)  ;| ° ̊
RegisterRota(4, "̀ ́ ̄ ᷄ ̌", 0x300, 0, 0, 8)  ;| ̀ ́ ̄ ᷄ ̌
RegisterRota(5, "$ £", 0x24, 0, 0, 8)  ;| $ £
RegisterRota(6, "Ü è", 0xDC, 0, 0, 8)  ;| Ü è
RegisterRota(7, "Ö é", 0xD6, 0, 0, 8)  ;| Ö é
RegisterRota(8, "Ä à", 0xC4, 0, 0, 8)  ;| Ä à
RegisterRota(9, "< ‹ «", 0x3C, 0, 0, 8)  ;| < ‹ «
RegisterRota(10, "> › »", 0x3E, 0, 0, 8)  ;| > › »
RegisterRota(11, "¹ ˩ ⁺", 0xB9, 0, 0, 8)  ;| ¹ ˩ ⁺
RegisterRota(12, "² ˨", 0xB2, 0, 0, 8)  ;| ² ˨
RegisterRota(13, "³ ˧", 0xB3, 0, 0, 8)  ;| ³ ˧
RegisterRota(14, "⁴ ˦", 0x2074, 0, 0, 8)  ;| ⁴ ˦
RegisterRota(15, "⁵ ˥", 0x2075, 0, 0, 8)  ;| ⁵ ˥
RegisterRota(16, "⁸ ⁽", 0x2078, 0, 0, 8)  ;| ⁸ ⁽
RegisterRota(17, "⁹ ⁾", 0x2079, 0, 0, 8)  ;| ⁹ ⁾
RegisterRota(18, "⁰ ⁼", 0x2070, 0, 0, 8)  ;| ⁰ ⁼
RegisterRota(19, "ᵉ ᵋ", 0x1D49, 0, 0, 8)  ;| ᵉ ᵋ
RegisterRota(20, "ⁱ ᶦ", 0x2071, 0, 0, 8)  ;| ⁱ ᶦ
RegisterRota(21, "ᵒ ᵓ", 0x1D52, 0, 0, 8)  ;| ᵒ ᵓ
RegisterRota(22, "ᵃ ᵅ ᵄ ᴬ", 0x1D43, 0, 0, 8)  ;| ᵃ ᵅ ᵄ ᴬ
RegisterRota(23, "ᵑ ᵍ", 0x1D51, 0, 0, 8)  ;| ᵑ ᵍ
RegisterRota(24, "ᵛ ⱽ", 0x1D5B, 0, 0, 8)  ;| ᵛ ⱽ
RegisterRota(25, "ⁿ ᴺ", 0x207F, 0, 0, 8)  ;| ⁿ ᴺ
RegisterRota(26, "‘ “", 0x2018, 0, 0, 8)  ;| ‘ “
RegisterRota(27, "’ ”", 0x2019, 0, 0, 8)  ;| ’ ”
RegisterRota(28, "₁ ₊", 0x2081, 0, 0, 8)  ;| ₁ ₊
RegisterRota(29, "₈ ₍", 0x2088, 0, 0, 8)  ;| ₈ ₍
RegisterRota(30, "₉ ₎", 0x2089, 0, 0, 8)  ;| ₉ ₎
RegisterRota(31, "₀ ₌", 0x2080, 0, 0, 8)  ;| ₀ ₌
RegisterRota(32, "| ± ∓", 0x7C, 0, 0, 8)  ;| | ± ∓
RegisterRota(33, "¦ |", 0xA6, 0, 0, 8)  ;| ¦ |
RegisterRota(34, "≈ ≡ ≟ ≠", 0x2248, 0, 0, 8)  ;| ≈ ≡ ≟ ≠
RegisterRota(35, "᷄ ᷅ ᷆ ᷇", 0x1DC4, 0, 0, 8)  ;| ᷄ ᷅ ᷆ ᷇
RegisterRota(36, "~ ̃", 0x7E, 0, 0, 8)  ;| ~ ̃
RegisterRota(37, "€ ɛ", 0x20AC, 0, 0, 8)  ;| € ɛ
RegisterRota(38, "ɾ √", 0x27E, 0, 0, 8)  ;| ɾ √
RegisterRota(39, "ʊ ɤ ʉ Ʉ", 0x28A, 0, 0, 8)  ;| ʊ ɤ ʉ Ʉ
RegisterRota(40, "ɨ ɪ", 0x268, 0, 0, 8)  ;| ɨ ɪ
RegisterRota(41, "ø ɔ", 0xF8, 0, 0, 8)  ;| ø ɔ
RegisterRota(42, "æ ɑ", 0xE6, 0, 0, 8)  ;| æ ɑ
RegisterRota(43, "ß ∑", 0xDF, 0, 0, 8)  ;| ß ∑
RegisterRota(44, "̥ ̩ ̯ ̝ ̞ ͈ ͉", 0x325, 0, 0, 8)  ;| ̥ ̩ ̯ ̝ ̞ ͈ ͉
RegisterRota(45, "ʌ ʊ", 0x28C, 0, 0, 8)  ;| ʌ ʊ
RegisterRota(46, "ː ‹ ‘ “", 0x2D0, 0, 0, 8)  ;| ː ‹ ‘ “
RegisterRota(47, "꞉ › ’ ”", 0xA789, 0, 0, 8)  ;| ꞉ › ’ ”
RegisterRota(48, "⃣ ⌨ ☎", 0x20E3, 0, 0, 8)  ;| ⃣ ⌨ ☎
RegisterRota(49, "½ ⅓ ¼ ⅕ ⅙ ⅛", 0xBD, 0, 0, 8)  ;| ½ ⅓ ¼ ⅕ ⅙ ⅛
RegisterRota(50, "⅔ ⅖", 0x2154, 0, 0, 8)  ;| ⅔ ⅖
RegisterRota(51, "¾ ⅗ ⅜", 0xBE, 0, 0, 8)  ;| ¾ ⅗ ⅜
RegisterRota(52, "⅚ ⅝", 0x215A, 0, 0, 8)  ;| ⅚ ⅝
RegisterRota(53, "∅ ◌", 0x2205, 0, 0, 8)  ;| ∅ ◌
RegisterRota(54, "Ɨ ∞", 0x197, 0, 0, 8)  ;| Ɨ ∞
RegisterRota(55, "Ø Ω", 0xD8, 0, 0, 8)  ;| Ø Ω
return
;________________________________________________________________________________________________________________

$`:: SendChar(0xA7)  ;| §
$-:: SendChar(0x27)  ;| '
$=:: DoRota(1)
;$y:: SendChar(0x7A)  ;| z DISABLED, dealt with in CapsLock section
;$[:: SendChar(0xFC)  ;| ü DISABLED, dealt with in CapsLock section
$]:: DoRota(2)
;$`;:: SendChar(0xF6)  ;| ö DISABLED, dealt with in CapsLock section
;$':: SendChar(0xE4)  ;| ä DISABLED, dealt with in CapsLock section
;$z:: SendChar(0x79)  ;| y DISABLED, dealt with in CapsLock section
$/:: SendChar(0x2D)  ;| -
$~:: DoRota(3)
$!:: SendChar(0x2B)  ;| +
$@:: SendChar(0x22)  ;| "
$#:: SendChar(0x2A)  ;| *
$$:: SendChar(0xE7)  ;| ç
$%:: SendChar(0x25)  ;| %
$^:: SendChar(0x26)  ;| &
$&:: SendChar(0x2F)  ;| /
$*:: SendChar(0x28)  ;| (
$(:: SendChar(0x29)  ;| )
$):: SendChar(0x3D)  ;| =
$_:: SendChar(0x3F)  ;| ?
$+:: DoRota(4)
$|:: DoRota(5)
$+y:: SendChar(0x5A)  ;| Z
${:: DoRota(6)
$}:: SendChar(0x21)  ;| !
$+`;:: DoRota(7)
$":: DoRota(8)
$+z:: SendChar(0x59)  ;| Y
$<:: SendChar(0x3B)  ;| ;
$>:: SendChar(0x3A)  ;| :
$?:: SendChar(0x5F)  ;| _
$^-:: SendChar(0x301)  ;| ́
$^=:: SendChar(0x300)  ;| ̀
$^,:: DoRota(9)
$^.:: DoRota(10)
$^~:: SendChar(0x207B)  ;| ⁻
$^!:: DoRota(11)
$^@:: DoRota(12)
$^#:: DoRota(13)
$^$:: DoRota(14)
$^%:: DoRota(15)
$^^:: SendChar(0x2076)  ;| ⁶
$^&:: SendChar(0x2077)  ;| ⁷
$^*:: DoRota(16)
$^(:: DoRota(17)
$^):: DoRota(18)
$^_:: SendChar(0x304)  ;| ̄
$^+:: SendChar(0x30C)  ;| ̌
$^+w:: SendChar(0x1D4A)  ;| ᵊ
$^+e:: DoRota(19)
$^+r:: SendChar(0x2B3)  ;| ʳ
$^+t:: SendChar(0x1D57)  ;| ᵗ
$^+i:: DoRota(20)
$^+o:: DoRota(21)
$^}:: SendChar(0xA71D)  ;| ꜝ
$^+a:: DoRota(22)
$^+s:: SendChar(0x2E2)  ;| ˢ
$^+d:: SendChar(0x1D48)  ;| ᵈ
$^+g:: DoRota(23)
$^+h:: SendChar(0x2B0)  ;| ʰ
$^+x:: SendChar(0x2E3)  ;| ˣ
$^+v:: DoRota(24)
$^+n:: DoRota(25)
$^+m:: SendChar(0x1D50)  ;| ᵐ
$^<:: DoRota(26)
$^>:: DoRota(27)
$!~:: SendChar(0x208B)  ;| ₋
$!!:: DoRota(28)
$!@:: SendChar(0x2082)  ;| ₂
$!#:: SendChar(0x2083)  ;| ₃
$!$:: SendChar(0x2084)  ;| ₄
$!%:: SendChar(0x2085)  ;| ₅
$!^:: SendChar(0x2086)  ;| ₆
$!&:: SendChar(0x2087)  ;| ₇
$!*:: DoRota(29)
$!(:: DoRota(30)
$!):: DoRota(31)
$!_:: SendChar(0xBF)  ;| ¿
$!+:: SendChar(0x302)  ;| ̂
$!}:: SendChar(0xA1)  ;| ¡
$!<:: SendChar(0x231E)  ;| ⌞
$!>:: SendChar(0x231F)  ;| ⌟
$^!1:: DoRota(32)
$^!2:: SendChar(0x40)  ;| @
$^!3:: SendChar(0x23)  ;| #
$^!6:: SendChar(0xAC)  ;| ¬
$^!7:: DoRota(33)
$^!8:: SendChar(0xA2)  ;| ¢
$^!0:: DoRota(34)
$^!-:: DoRota(35)
$^!=:: DoRota(36)
$^!\:: SendChar(0x7D)  ;| }
$^!w:: SendChar(0x259)  ;| ə
$^!e:: DoRota(37)
$^!r:: DoRota(38)
$^!y:: SendChar(0x291)  ;| ʑ
$^!u:: DoRota(39)
$^!i:: DoRota(40)
$^!o:: DoRota(41)
$^![:: SendChar(0x5B)  ;| [
$^!]:: SendChar(0x5D)  ;| ]
$^!a:: DoRota(42)
$^!s:: DoRota(43)
$^!g:: SendChar(0x261)  ;| ɡ
$^!h:: SendChar(0x2713)  ;| ✓
$^!k::
SendChar(0x6B)  ;| k
SendChar(0x320)  ;| ̠
return
$^!`;:: DoRota(44)
$^!':: SendChar(0x7B)  ;| {
$^!z:: SendChar(0x263)  ;| ɣ
$^!c:: SendChar(0x255)  ;| ɕ
$^!v:: DoRota(45)
$^!n:: SendChar(0x14B)  ;| ŋ
$^!m:: SendChar(0xB5)  ;| µ
$^!,:: DoRota(46)
$^!.:: DoRota(47)
$^!/:: SendChar(0x2013)  ;| –
$^!~:: DoRota(48)
$^!!:: DoRota(49)
$^!@:: DoRota(50)
$^!#:: DoRota(51)
$^!$:: SendChar(0x2158)  ;| ⅘
$^!%:: DoRota(52)
$^!&:: SendChar(0x215E)  ;| ⅞
$^!):: DoRota(53)
$^!_:: SendChar(0x2BC)  ;| ʼ
$^!+:: SendChar(0x7E)  ;| ~
$^!+e:: SendChar(0x2208)  ;| ∈
$^!+i:: DoRota(54)
$^!+o:: DoRota(55)
$^!+a:: SendChar(0xC6)  ;| Æ
$^!+`;:: SendChar(0x31A)  ;| ̚
$^!+x::
SendChar(0x49)  ;| I
SendChar(0x6E)  ;| n
SendChar(0x4B)  ;| K
SendChar(0x65)  ;| e
SendChar(0x79)  ;| y
SendChar(0x53)  ;| S
SendChar(0x47)  ;| G
return
$^!+n:: SendChar(0x14A)  ;| Ŋ
$^!<:: SendChar(0xAB)  ;| «
$^!>:: SendChar(0xBB)  ;| »
$^!?:: SendChar(0x2014)  ;| —
; ******************************************************************************
; ***       Addition to SGPlus.ahk generated by InKeyKeyboardCreator         ***
; ******************************************************************************

; --- Additional key on the Swiss German keyboard (Scan code 056) ---
SC056:: SendChar(0x3C)    ;| <
+SC056:: SendChar(0x3E)   ;| >
^!SC056:: SendChar(0x5C)  ;| \

; --- Additional arrow keys definitions ---
+^!left::SendChar(0x2190)    ;| ← - left arrow
+^!right::SendChar(0x2192)   ;| → - right arrow
+^!up::SendChar(0x2191)      ;| ↑ - up arrow
+^!down::SendChar(0x2193)    ;| ↓ - down arrow

; --- Additional spacebar definitions ---
+^!space::SendChar(0x00A0)   ;| ← - no break space
+!space::SendChar(0x200B)    ;| ← - zero width space (breaking)

; --- Additional hyphen definitions ---
$^/:: SendChar(0x1F)         ;| Optional hyphen as used in MS Office (2003)*
$+^/:: SendChar(0x2011)      ;| Non-Breaking hyphen
; *InKey Keyboard Creator crashes when trying to define there

; --- Handling CapsLock ---

; Toggling CapsLock On and Off
$Capslock::
if (GetKeyState("CapsLock", "T")) 	; If the CapsLock toggle state is currently ON, turn it OFF.
{
	SetCapsLockState OFF		; (AHK also offers an ALWAYSOFF setting, but this affects keyboards beyond the current one, too.)
	TrayTipQ("CapsLock is now OFF")
}
else
{
	SetCapsLockState ON
	TrayTipQ("CapsLock is now ON")
}
return

; General procedure for CapsLock handling:
; Check CapsLock state and output appropriate character
ChkCapsLock(lCase, uCase)
{
	if (GetKeyState("CapsLock", "T"))
		SendChar(uCase)
	else
		SendChar(lCase)
}

; CapsLock handling of individual characters
$a::ChkCapsLock(0x61, 0x41)
$b::ChkCapsLock(0x62, 0x42)
$c::ChkCapsLock(0x63, 0x43)
$d::ChkCapsLock(0x64, 0x44)
$e::ChkCapsLock(0x65, 0x45)
$f::ChkCapsLock(0x66, 0x46)
$g::ChkCapsLock(0x67, 0x47)
$h::ChkCapsLock(0x68, 0x48)
$i::ChkCapsLock(0x69, 0x49)
$j::ChkCapsLock(0x6A, 0x4A)
$k::ChkCapsLock(0x6B, 0x4B)
$l::ChkCapsLock(0x6C, 0x4C)
$m::ChkCapsLock(0x6D, 0x4D)
$n::ChkCapsLock(0x6E, 0x4E)
$o::ChkCapsLock(0x6F, 0x4F)
$p::ChkCapsLock(0x70, 0x50)
$q::ChkCapsLock(0x71, 0x51)
$r::ChkCapsLock(0x72, 0x52)
$s::ChkCapsLock(0x73, 0x53)
$t::ChkCapsLock(0x74, 0x54)
$u::ChkCapsLock(0x75, 0x55)
$v::ChkCapsLock(0x76, 0x56)
$w::ChkCapsLock(0x77, 0x57)
$x::ChkCapsLock(0x78, 0x58)
$z::ChkCapsLock(0x79, 0x59) ; "y" and "z" reversed!
$y::ChkCapsLock(0x7A, 0x5A) ; "y" and "z" reversed!

$'::ChkCapsLock(0xE4, 0xC4)  ; ä/Ä
$`;::ChkCapsLock(0xF6, 0xD6) ; ö/Ö
$[::ChkCapsLock(0xFC, 0xDC)  ; ü/Ü
